{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/js/lib/pace.custom.coffee","app/js/preloader.coffee"],"names":[],"mappings":"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","file":"preloader.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# Added 'update' event trigger (line 236)\n\ndefaultOptions =\n  # How long should it take for the bar to animate to a new\n  # point after receiving it\n  catchupTime: 100\n\n  # How quickly should the bar be moving before it has any progress\n  # info from a new source in %/ms\n  initialRate: .03\n\n  # What is the minimum amount of time the bar should be on the\n  # screen.  Irrespective of this number, the bar will always be on screen for\n  # 33 * (100 / maxProgressPerFrame) + ghostTime ms.\n  minTime: 250\n\n  # What is the minimum amount of time the bar should sit after the last\n  # update before disappearing\n  ghostTime: 100\n\n  # Its easy for a bunch of the bar to be eaten in the first few frames\n  # before we know how much there is to load.  This limits how much of\n  # the bar can be used per frame\n  maxProgressPerFrame: 20\n\n  # This tweaks the animation easing\n  easeFactor: 1.25\n\n  # Should pace automatically start when the page is loaded, or should it wait for `start` to\n  # be called?  Always false if pace is loaded with AMD or CommonJS.\n  startOnPageLoad: true\n\n  # Should we restart the browser when pushState or replaceState is called?  (Generally\n  # means ajax navigation has occured)\n  restartOnPushState: true\n\n  # Should we show the progress bar for every ajax request (not just regular or ajax-y page\n  # navigation)? Set to false to disable.\n  #\n  # If so, how many ms does the request have to be running for before we show the progress?\n  restartOnRequestAfter: 500\n\n  # What element should the pace element be appended to on the page?\n  target: 'body'\n\n  elements:\n    # How frequently in ms should we check for the elements being tested for\n    # using the element monitor?\n    checkInterval: 100\n\n    # What elements should we wait for before deciding the page is fully loaded (not required)\n    selectors: ['body']\n\n  eventLag:\n    # When we first start measuring event lag, not much is going on in the browser yet, so it's\n    # not uncommon for the numbers to be abnormally low for the first few samples.  This configures\n    # how many samples we need before we consider a low number to mean completion.\n    minSamples: 10\n\n    # How many samples should we average to decide what the current lag is?\n    sampleCount: 3\n\n    # Above how many ms of lag is the CPU considered busy?\n    lagThreshold: 3\n\n  ajax:\n    # Which HTTP methods should we track?\n    trackMethods: ['GET']\n\n    # Should we track web socket connections?\n    trackWebSockets: true\n\n    # A list of regular expressions or substrings of URLS we should ignore (for both tracking and restarting)\n    ignoreURLs: []\n\nnow = ->\n  performance?.now?() ? +new Date\n\nrequestAnimationFrame = window.requestAnimationFrame or window.mozRequestAnimationFrame or\n                        window.webkitRequestAnimationFrame or window.msRequestAnimationFrame\n\ncancelAnimationFrame = window.cancelAnimationFrame or window.mozCancelAnimationFrame\n\nif not requestAnimationFrame?\n  requestAnimationFrame = (fn) ->\n    setTimeout fn, 50\n\n  cancelAnimationFrame = (id) ->\n    clearTimeout id\n\nrunAnimation = (fn) ->\n  last = now()\n  tick = ->\n    diff = now() - last\n\n    if diff >= 33\n      # Don't run faster than 30 fps\n\n      last = now()\n      fn diff, ->\n        requestAnimationFrame tick\n    else\n      setTimeout tick, (33 - diff)\n\n  tick()\n\nresult = (obj, key, args...) ->\n  if typeof obj[key] is 'function'\n    obj[key](args...)\n  else\n    obj[key]\n\nextend = (out, sources...) ->\n  for source in sources when source\n    for own key, val of source\n      if out[key]? and typeof out[key] is 'object' and val? and typeof val is 'object'\n        extend(out[key], val)\n      else\n        out[key] = val\n  out\n\navgAmplitude = (arr) ->\n  sum = count = 0\n  for v in arr\n    sum += Math.abs(v)\n    count++\n\n  sum / count\n\ngetFromDOM = (key='options', json=true) ->\n  el = document.querySelector \"[data-pace-#{ key }]\"\n\n  return unless el\n\n  data = el.getAttribute \"data-pace-#{ key }\"\n\n  return data if not json\n\n  try\n    return JSON.parse data\n  catch e\n    console?.error \"Error parsing inline pace options\", e\n\nclass Evented\n  on: (event, handler, ctx, once=false) ->\n    @bindings ?= {}\n    @bindings[event] ?= []\n    @bindings[event].push {handler, ctx, once}\n\n  once: (event, handler, ctx) ->\n    @on(event, handler, ctx, true)\n\n  off: (event, handler) ->\n    return unless @bindings?[event]?\n\n    if not handler?\n      delete @bindings[event]\n    else\n      i = 0\n      while i < @bindings[event].length\n        if @bindings[event][i].handler is handler\n          @bindings[event].splice i, 1\n        else\n          i++\n\n  trigger: (event, args...) ->\n    if @bindings?[event]\n      i = 0\n      while i < @bindings[event].length\n        {handler, ctx, once} = @bindings[event][i]\n\n        handler.apply(ctx ? @, args)\n\n        if once\n          @bindings[event].splice i, 1\n        else\n          i++\n\nPace = window.Pace or {}\nwindow.Pace = Pace\n\nextend Pace, Evented::\n\noptions = Pace.options = extend {}, defaultOptions, window.paceOptions, getFromDOM()\n\nfor source in ['ajax', 'document', 'eventLag', 'elements']\n  # true enables them without configuration, so we grab the config from the defaults\n  if options[source] is true\n    options[source] = defaultOptions[source]\n\nclass NoTargetError extends Error\n\nclass Bar\n  constructor: ->\n    @progress = 0\n\n  getElement: ->\n    if not @el?\n      targetElement = document.querySelector options.target\n\n      if not targetElement\n        throw new NoTargetError\n\n      @el = document.createElement 'div'\n      @el.className = \"pace pace-active\"\n\n      document.body.className = document.body.className.replace /pace-done/g, ''\n      if not /pace-running/.test document.body.className\n        document.body.className += ' pace-running'\n\n      @el.innerHTML = '''\n      <div class=\"pace-progress\">\n        <div class=\"pace-progress-inner\"></div>\n      </div>\n      <div class=\"pace-activity\"></div>\n      '''\n      if targetElement.firstChild?\n        targetElement.insertBefore @el, targetElement.firstChild\n      else\n        targetElement.appendChild @el\n\n    @el\n\n  finish: ->\n    el = @getElement()\n\n    el.className = el.className.replace 'pace-active', ''\n    el.className += ' pace-inactive'\n\n    document.body.className = document.body.className.replace 'pace-running', ''\n    document.body.className += ' pace-done'\n\n  update: (prog) ->\n    @progress = prog\n\n    Pace.trigger 'update', prog\n\n    do @render\n\n  destroy: ->\n    try\n      @getElement().parentNode.removeChild(@getElement())\n    catch NoTargetError\n\n    @el = undefined\n\n  render: ->\n    if not document.querySelector(options.target)?\n      return false\n\n    el = @getElement()\n\n    transform = \"translate3d(#{ @progress }%, 0, 0)\"\n    for key in ['webkitTransform', 'msTransform', 'transform']\n      el.children[0].style[key] = transform\n\n    if not @lastRenderedProgress or @lastRenderedProgress|0 != @progress|0\n      # The whole-part of the number has changed\n\n      el.children[0].setAttribute 'data-progress-text', \"#{ @progress|0 }%\"\n\n      if @progress >= 100\n        # We cap it at 99 so we can use prefix-based attribute selectors\n        progressStr = '99'\n      else\n        progressStr = if @progress < 10 then \"0\" else \"\"\n        progressStr += @progress|0\n\n      el.children[0].setAttribute 'data-progress', \"#{ progressStr }\"\n\n    @lastRenderedProgress = @progress\n\n  done: ->\n    @progress >= 100\n\nclass Events\n  constructor: ->\n    @bindings = {}\n\n  trigger: (name, val) ->\n    if @bindings[name]?\n      for binding in @bindings[name]\n        binding.call @, val\n\n  on: (name, fn) ->\n    @bindings[name] ?= []\n    @bindings[name].push fn\n\n_XMLHttpRequest = window.XMLHttpRequest\n_XDomainRequest = window.XDomainRequest\n_WebSocket = window.WebSocket\n\nextendNative = (to, from) ->\n  for key of from::\n    try\n      if not to[key]? and typeof from[key] isnt 'function'\n        if typeof Object.defineProperty is 'function'\n          Object.defineProperty(to, key, {\n             get: ->\n                 return from::[key];\n              ,\n              configurable: true,\n              enumerable: true })\n        else\n          to[key] = from::[key]\n    catch e\n\nignoreStack = []\n\nPace.ignore = (fn, args...) ->\n  ignoreStack.unshift 'ignore'\n  ret = fn(args...)\n  ignoreStack.shift()\n  ret\n\nPace.track = (fn, args...) ->\n  ignoreStack.unshift 'track'\n  ret = fn(args...)\n  ignoreStack.shift()\n  ret\n\nshouldTrack = (method='GET') ->\n  if ignoreStack[0] is 'track'\n    return 'force'\n\n  if not ignoreStack.length and options.ajax\n    if method is 'socket' and options.ajax.trackWebSockets\n      return true\n    else if method.toUpperCase() in options.ajax.trackMethods\n      return true\n\n  return false\n\n# We should only ever instantiate one of these\nclass RequestIntercept extends Events\n  constructor: ->\n    super\n\n    monitorXHR = (req) =>\n      _open = req.open\n      req.open = (type, url, async) =>\n        if shouldTrack(type)\n          @trigger 'request', {type, url, request: req}\n\n        _open.apply req, arguments\n\n    window.XMLHttpRequest = (flags) ->\n      req = new _XMLHttpRequest(flags)\n\n      monitorXHR req\n\n      req\n\n    try\n      extendNative window.XMLHttpRequest, _XMLHttpRequest\n\n    if _XDomainRequest?\n      window.XDomainRequest = ->\n        req = new _XDomainRequest\n\n        monitorXHR req\n\n        req\n\n      try\n        extendNative window.XDomainRequest, _XDomainRequest\n\n    if _WebSocket? and options.ajax.trackWebSockets\n      window.WebSocket = (url, protocols) =>\n        if protocols?\n          req = new _WebSocket(url, protocols)\n        else\n          req = new _WebSocket(url)\n\n        if shouldTrack('socket')\n          @trigger 'request', {type: 'socket', url, protocols, request: req}\n\n        req\n\n      try\n        extendNative window.WebSocket, _WebSocket\n\n_intercept = null\ngetIntercept = ->\n  if not _intercept?\n    _intercept = new RequestIntercept\n  _intercept\n\nshouldIgnoreURL = (url) ->\n  for pattern in options.ajax.ignoreURLs\n    if typeof pattern is 'string'\n      if url.indexOf(pattern) isnt -1\n        return true\n\n    else\n      if pattern.test(url)\n        return true\n\n  return false\n\n# If we want to start the progress bar\n# on every request, we need to hear the request\n# and then inject it into the new ajax monitor\n# start will have created.\n\ngetIntercept().on 'request', ({type, request, url}) ->\n  return if shouldIgnoreURL(url)\n\n  if not Pace.running and (options.restartOnRequestAfter isnt false or shouldTrack(type) is 'force')\n    args = arguments\n\n    after = options.restartOnRequestAfter or 0\n    if typeof after is 'boolean'\n      after = 0\n\n    setTimeout ->\n      if type is 'socket'\n        stillActive = request.readyState < 2\n      else\n        stillActive = 0 < request.readyState < 4\n\n      if stillActive\n        Pace.restart()\n\n        for source in Pace.sources\n          if source instanceof AjaxMonitor\n            source.watch args...\n            break\n    , after\n\nclass AjaxMonitor\n  constructor: ->\n    @elements = []\n\n    getIntercept().on 'request', => @watch arguments...\n\n  watch: ({type, request, url}) ->\n    return if shouldIgnoreURL(url)\n\n    if type is 'socket'\n      tracker = new SocketRequestTracker(request)\n    else\n      tracker = new XHRRequestTracker(request)\n\n    @elements.push tracker\n\nclass XHRRequestTracker\n  constructor: (request) ->\n    @progress = 0\n\n    if window.ProgressEvent?\n      # We're dealing with a modern browser with progress event support\n\n      size = null\n      request.addEventListener 'progress', (evt) =>\n        if evt.lengthComputable\n          @progress = 100 * evt.loaded / evt.total\n        else\n          # If it's chunked encoding, we have no way of knowing the total length of the\n          # response, all we can do is increment the progress with backoff such that we\n          # never hit 100% until it's done.\n          @progress = @progress + (100 - @progress) / 2\n      , false\n\n      for event in ['load', 'abort', 'timeout', 'error']\n        request.addEventListener event, =>\n          @progress = 100\n        , false\n\n    else\n      _onreadystatechange = request.onreadystatechange\n      request.onreadystatechange = =>\n        if request.readyState in [0, 4]\n          @progress = 100\n        else if request.readyState is 3\n          @progress = 50\n\n        _onreadystatechange?(arguments...)\n\nclass SocketRequestTracker\n  constructor: (request) ->\n    @progress = 0\n\n    for event in ['error', 'open']\n      request.addEventListener event, =>\n        @progress = 100\n      , false\n\nclass ElementMonitor\n  constructor: (options={}) ->\n    @elements = []\n\n    options.selectors ?= []\n    for selector in options.selectors\n      @elements.push new ElementTracker selector\n\nclass ElementTracker\n  constructor: (@selector) ->\n    @progress = 0\n\n    @check()\n\n  check: ->\n    if document.querySelector(@selector)\n      @done()\n    else\n      setTimeout (=> @check()),\n        options.elements.checkInterval\n\n  done: ->\n    @progress = 100\n\nclass DocumentMonitor\n  states:\n    loading: 0\n    interactive: 50\n    complete: 100\n\n  constructor: ->\n    @progress = @states[document.readyState] ? 100\n\n    _onreadystatechange = document.onreadystatechange\n    document.onreadystatechange = =>\n      if @states[document.readyState]?\n        @progress = @states[document.readyState]\n\n      _onreadystatechange?(arguments...)\n\nclass EventLagMonitor\n  constructor: ->\n    @progress = 0\n\n    avg = 0\n\n    samples = []\n\n    points = 0\n    last = now()\n    interval = setInterval =>\n      diff = now() - last - 50\n      last = now()\n\n      samples.push diff\n\n      if samples.length > options.eventLag.sampleCount\n        samples.shift()\n\n      avg = avgAmplitude samples\n\n      if ++points >= options.eventLag.minSamples and avg < options.eventLag.lagThreshold\n        @progress = 100\n\n        clearInterval interval\n      else\n        @progress = 100 * (3 / (avg + 3))\n\n    , 50\n\nclass Scaler\n  constructor: (@source) ->\n    @last = @sinceLastUpdate = 0\n    @rate = options.initialRate\n    @catchup = 0\n    @progress = @lastProgress = 0\n\n    if @source?\n      @progress = result(@source, 'progress')\n\n  tick: (frameTime, val) ->\n    val ?= result(@source, 'progress')\n\n    if val >= 100\n      @done = true\n\n    if val == @last\n      @sinceLastUpdate += frameTime\n    else\n      if @sinceLastUpdate\n        @rate = (val - @last) / @sinceLastUpdate\n\n      @catchup = (val - @progress) / options.catchupTime\n\n      @sinceLastUpdate = 0\n      @last = val\n\n    if val > @progress\n      # After we've got a datapoint, we have catchupTime to\n      # get the progress bar to reflect that new data\n      @progress += @catchup * frameTime\n\n    scaling = (1 - Math.pow(@progress / 100, options.easeFactor))\n\n    # Based on the rate of the last update, we preemptively update\n    # the progress bar, scaling it so it can never hit 100% until we\n    # know it's done.\n    @progress += scaling * @rate * frameTime\n\n    @progress = Math.min(@lastProgress + options.maxProgressPerFrame, @progress)\n\n    @progress = Math.max(0, @progress)\n    @progress = Math.min(100, @progress)\n\n    @lastProgress = @progress\n\n    @progress\n\nsources = null\nscalers = null\nbar = null\nuniScaler = null\nanimation = null\ncancelAnimation = null\nPace.running = false\n\nhandlePushState = ->\n  if options.restartOnPushState\n    Pace.restart()\n\n# We reset the bar whenever it looks like an ajax navigation has occured.\nif window.history.pushState?\n  _pushState = window.history.pushState\n  window.history.pushState = ->\n    handlePushState()\n\n    _pushState.apply window.history, arguments\n\nif window.history.replaceState?\n  _replaceState = window.history.replaceState\n  window.history.replaceState = ->\n    handlePushState()\n\n    _replaceState.apply window.history, arguments\n\nSOURCE_KEYS =\n  ajax: AjaxMonitor\n  elements: ElementMonitor\n  document: DocumentMonitor\n  eventLag: EventLagMonitor\n\ndo init = ->\n  Pace.sources = sources = []\n\n  for type in ['ajax', 'elements', 'document', 'eventLag']\n    if options[type] isnt false\n      sources.push new SOURCE_KEYS[type](options[type])\n\n  for source in options.extraSources ? []\n    sources.push new source(options)\n\n  Pace.bar = bar = new Bar\n\n  # Each source of progress data has it's own scaler to smooth its output\n  scalers = []\n\n  # We have an extra scaler for the final output to keep things looking nice as we add and\n  # remove sources\n  uniScaler = new Scaler\n\nPace.stop = ->\n  Pace.trigger 'stop'\n  Pace.running = false\n\n  bar.destroy()\n\n  # Not all browsers support cancelAnimationFrame\n  cancelAnimation = true\n\n  if animation?\n    cancelAnimationFrame? animation\n    animation = null\n\n  init()\n\nPace.restart = ->\n  Pace.trigger 'restart'\n  Pace.stop()\n  Pace.start()\n\nPace.go = ->\n  Pace.running = true\n\n  bar.render()\n\n  start = now()\n\n  cancelAnimation = false\n  animation = runAnimation (frameTime, enqueueNextFrame) ->\n    # Every source gives us a progress number from 0 - 100\n    # It's up to us to figure out how to turn that into a smoothly moving bar\n    #\n    # Their progress numbers can only increment.  We try to interpolate\n    # between the numbers.\n\n    remaining = 100 - bar.progress\n\n    count = sum = 0\n    done = true\n    # A source is composed of a bunch of elements, each with a raw, unscaled progress\n    for source, i in sources\n      scalerList = scalers[i] ?= []\n\n      elements = source.elements ? [source]\n\n      # Each element is given it's own scaler, which turns its value into something\n      # smoothed for display\n      for element, j in elements\n        scaler = scalerList[j] ?= new Scaler element\n\n        done &= scaler.done\n\n        continue if scaler.done\n\n        count++\n        sum += scaler.tick(frameTime)\n\n    avg = sum / count\n\n    bar.update uniScaler.tick(frameTime, avg)\n\n    if bar.done() or done or cancelAnimation\n      bar.update 100\n\n      Pace.trigger 'done'\n\n      setTimeout ->\n        bar.finish()\n\n        Pace.running = false\n\n        Pace.trigger 'hide'\n      , Math.max(options.ghostTime, Math.max(options.minTime - (now() - start), 0))\n    else\n      enqueueNextFrame()\n\nPace.start = (_options) ->\n  extend options, _options\n\n  Pace.running = true\n\n  try\n    bar.render()\n  catch NoTargetError\n\n  # It's usually possible to render a bit before the document declares itself ready\n  if not document.querySelector('.pace')\n    setTimeout Pace.start, 50\n  else\n    Pace.trigger 'start'\n    Pace.go()\n\nif typeof define is 'function' and define.amd\n  # AMD\n  define ['pace'], -> Pace\nelse if typeof exports is 'object'\n  # CommonJS\n  module.exports = Pace\nelse\n  # Global\n  if options.startOnPageLoad\n    Pace.start()\n","pace = require './lib/pace.custom'\npace.start()\n\npreloader = document.getElementById 'preloader'\npreloaderFront = document.querySelector '.preloader__frontlayer'\n\npace.on 'update', (progress) ->\n  preloaderFront.style.width = \"#{progress}%\"\n\npace.on 'done', ->\n  do hidePreloader\n\nhidePreloader = (cb = -> ) ->\n  setTimeout ->\n    preloader.classList.add 'fade-out'\n  , 300\n  setTimeout ->\n    preloader.setAttribute 'hidden', 'hidden'\n  , 800\n\nmodule.exports = pace\n"]}